<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wilson Mendes - Blog</title>
    <description>This is my blog, where i talk about technologies</description>
    <link>http://willmendesneto.github.io/</link>
    <atom:link href="http://willmendesneto.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 11 Mar 2016 10:57:48 +0000</pubDate>
    <lastBuildDate>Fri, 11 Mar 2016 10:57:48 +0000</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>Otimizando o watch do jekyll</title>
        <description>&lt;p&gt;Este post é bem simples, mas crucial para melhorar o seu trabalho, além de ser o primeiro post do ano, claro =).&lt;/p&gt;

&lt;h1&gt;Introdução&lt;/h1&gt;

&lt;p&gt;O &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; é um gerador que transforma seus arquivos markdown em websites e/ou blogs baseado em arquivos estáticos. Mas quando seu projeto possui uma massa de dados (neste caso, arquivos markdown) relativamente grande percebe-se o tempo de compilação de mardown para páginas estáticas pode ser um problema.&lt;/p&gt;

&lt;h1&gt;O comando serve&lt;/h1&gt;

&lt;p&gt;O comando &lt;code&gt;jekyll &amp;lt;serve|server|s&amp;gt;&lt;/code&gt; é a base de tudo. A partir dele é possível rodar o servidor local do Jekyll para que possamos visualizar o conteúdo criado. Ele aceita alguns atributos (para visualizar lista completa basta dar uma olhada no output do comando &lt;code&gt;jekyll --help&lt;/code&gt;). Um deles, o &lt;code&gt;--limit_posts&lt;/code&gt; é bem interessante, pois nele podemos limitar a quantidade de posts a serem renderizados pelo comando &lt;code&gt;server&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll serve -w --limit_posts &amp;lt;number-of-posts&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sendo que o &lt;code&gt;&amp;lt;number-of-posts&amp;gt;&lt;/code&gt; é o número que para você é necessário para validar o layout e o conteúdo. Pode ser 1, 10, 20 e assim sucessivamente. Isso é bem bacana, pois podemos otimizar o feedback de nossas alterações/atualizações.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Caso esteja utilizando o Jekyll &amp;gt;= 3.0 utilize o comando &lt;code&gt;jekyll serve --incremental&lt;/code&gt; para uma melhoria no tempo de resposta&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;Conclusão&lt;/h1&gt;

&lt;p&gt;Esta dica apesar de simples pode ser extremamente útil, pois ter um feedback mais rápido do seu código quer dizer também em otimização no seu workflow. E no caso de estar trabalhando com um projeto com mais de 1.000 arquivos markdown a compilação em ambiente de desenvolvimento pode ser algo realmente impactante.&lt;/p&gt;

&lt;p&gt;E aí? Vocês tem outras dicas para otimização do Jekyll? Qual a sua? Compartilhe sua experiência!&lt;/p&gt;

&lt;p&gt;Links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Jekyll: &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;https://jekyllrb.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 12 Jan 2016 00:00:00 +0000</pubDate>
        <link>http://willmendesneto.github.io/2016/01/12/otimizando-o-watch-do-jekyll</link>
        <guid isPermaLink="true">http://willmendesneto.github.io/2016/01/12/otimizando-o-watch-do-jekyll</guid>
        
        <category>jekyll</category>
        
        <category>otimização</category>
        
        
        <category>otimização</category>
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>Checando sua build pipeline no Snap-CI via NodeBots utilizando NodeJS e Arduino</title>
        <description>&lt;h1&gt;Introdução&lt;/h1&gt;

&lt;p&gt;A idéia desta postagem é compartilhar alguns conceitos básicos sobre a utilização de open hardware manipulando-o a partir do Javascript.&lt;/p&gt;

&lt;p&gt;Sempre que começamos o contato com o &lt;a href=&quot;https://www.arduino.cc/&quot;&gt;Arduino&lt;/a&gt;, por exemplo, fazemos o exemplo de piscas as leds, comumento conhecido como blink. Neste exemplo mostrarei uma forma mais atrativa de abordar este exemplo para o nosso cotidiano, baseado em modelos como Hubot e Retaliation para checarmos a nossa build pipeline e averiguarmos a saúde de nossa aplicação utilizando &lt;a href=&quot;https://www.arduino.cc/&quot;&gt;Arduino&lt;/a&gt; + NodeJS + &lt;a href=&quot;https://johnny-five.io/&quot;&gt;Johnny-Five&lt;/a&gt; em uma introdução a &lt;a href=&quot;https://nodebots.io/&quot;&gt;NodeBots&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Build pipeline&lt;/h1&gt;

&lt;p&gt;Em algumas apresentações percebi que este termo não é conhecido por muitas pessoas, mesmo as que são mais familiarizadas com abordagens como integração contínua e entrega contínua. Build pipeline é um conceito que foi construído em meados de 2005 e é baseado na idéia de paralelização de tarefas, separando cada etapa em pequenos critérios de aceitação para a aplicação. Vale lembrar que esses passos podem automáticos ou manuais.&lt;/p&gt;

&lt;p&gt;Um exemplo de um serviço gratuito que utiliza este conceito é o &lt;a href=&quot;https://snap-ci.com/&quot;&gt;Snap-CI&lt;/a&gt;, que te dá várias facilidades, suporte a outras linguagens, deploy em diversas plataformas, dentre outras funcionalidades bem bacanas.&lt;/p&gt;

&lt;p&gt;Para este exemplo de nosso build-checker criei um projeto de exemplo no github e o integrei no nosso &lt;a href=&quot;https://snap-ci.com/&quot;&gt;Snap-CI&lt;/a&gt;. Após as configurações iniciais (uma das coisas bacanas no projeto é que ele tem um guia bem bacana e simples) podemos verificar o nosso build mais atual a partir da aba de notificações. Você&lt;/p&gt;

&lt;h1&gt;NodeBots&lt;/h1&gt;

&lt;p&gt;NodeBots é um conceito que une a linguagem de programação Javascript e robótica. Isso foi possível graças ao surgimento do NodeJS, que possibilita a utilização do Javascript em outros ambientes além dos navegadores (como em geladeiras, micro controladores e outras opções) e o pacote node-serialport, criado por Chris Williams, permitindo que os desenvolvedores controlassem hardware a partir da utilização do javascript.&lt;/p&gt;

&lt;h1&gt;Arduino&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.arduino.cc/&quot;&gt;Arduino&lt;/a&gt; é uma plataforma open-source baseada em hardware e software de fácil utilização. Com isso qualquer um pode construir interações utilizando-o em projetos dos mais diversos. Até podendo evoluir aos seu bel prazer, já que o projeto é de código aberto.&lt;/p&gt;

&lt;p&gt;Dentre as suas vantagens encontramos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Custo: o valor de um arduino é menor do que $50&lt;/li&gt;
&lt;li&gt;Cross-platform: Arduino é uma plataforma open-source
compatível com todos os sistemas operacionais;&lt;/li&gt;
&lt;li&gt;Simples: Não exige de quem vai manipulá-lo um vasto conhecimento em eletrônica. Basta ter uma noção básica de desenvolvimento e você já pode fazer coisas bem bacanas;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Baseado nestas características, vamos ao que interessa o nosso projeto de introdução a &lt;a href=&quot;https://nodebots.io/&quot;&gt;NodeBots&lt;/a&gt; com a ferramenta &lt;a href=&quot;https://github.com/willmendesneto/build-checker&quot;&gt;build-checker&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;Build checker: o projeto&lt;/h1&gt;

&lt;p&gt;O projeto foi baseado no CCmenu, projeto criado pelo ThoughtWorker Erik Doernenburg para checar e mostrar o
status de um determinado projeto em um servidor de integração contínua.&lt;/p&gt;

&lt;p&gt;No nosso caso passamos a idéia para algo físico, utilizando open hardware e NodeJS. Nossa aplicação consumirá um XML com as informações retornadas pelo &lt;a href=&quot;https://snap-ci.com/&quot;&gt;Snap-CI&lt;/a&gt;. A partir destes dados checaremos o estado atual da aplicação e o retornaremos utilizando alguns artifícios como Arduino e Led&amp;#39;s para avisar ao nosso time de que algo de errado aconteceu com o nosso build e devemos corrigir o quanto antes.&lt;/p&gt;

&lt;p&gt;Primeiramente precisamos instalar o NodeJS em nossa máquina. Sua instalação é muito simples e pode ser feita seguindo as instruções contidas no próprio site do projeto.&lt;/p&gt;

&lt;p&gt;O nosso próximo passo é a instalação do Arduino IDE. Após instalado, vamos nas opções &amp;gt; Arquivos &amp;gt; Exemplos &amp;gt; StandardFirmata.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/open-firmata-example.png&quot; alt=&quot;Abrindo opções de exemplo no Arduino IDE&quot;&gt;&lt;/p&gt;

&lt;p&gt;Com o Arduino plugado no nosso computador rodamos o código a seguir e aguardamos a mensagem da IDE de que tudo ocorreu com sucesso.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/upload-firmata-example.png&quot; alt=&quot;Tudo ok. Firmata rodando&quot;&gt;&lt;/p&gt;

&lt;p&gt;Agora vamos ao nosso build checker. Para isso utilizaremos o pacote NodeJs &lt;a href=&quot;https://johnny-five.io/&quot;&gt;Johnny-Five&lt;/a&gt;. O código é bem simples.&lt;/p&gt;

&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;var request = require(&amp;#39;request&amp;#39;);
var five = require(&amp;#39;johnny-five&amp;#39;);
var board = new five.Board();&lt;/p&gt;

&lt;p&gt;var CONFIG = {
  LED: {
    SUCCESS: 12,
    ERROR: 10
  },
  CI&lt;em&gt;CCTRACKER&lt;/em&gt;URL: &amp;#39;https://snap-ci.com/willmendesneto/generator-reactor/branch/master/cctray.xml&amp;#39;,
  INTERVAL: 500
};&lt;/p&gt;

&lt;p&gt;function debounce(func, wait, immediate) {
    var timeout;
    return function() {
        var context = this, args = arguments;
        var later = function() {
            timeout = null;
            if (!immediate) func.apply(context, args);
        };
        var callNow = immediate &amp;amp;&amp;amp; !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) func.apply(context, args);
    };
};&lt;/p&gt;

&lt;p&gt;board.on(&amp;#39;ready&amp;#39;, function() {&lt;/p&gt;

&lt;p&gt;var ledSuccess = new five.Led(CONFIG.LED.SUCCESS);
  var ledError = new five.Led(CONFIG.LED.ERROR);&lt;/p&gt;

&lt;p&gt;debounce(function(){
    request(CONFIG.CI&lt;em&gt;CCTRACKER&lt;/em&gt;URL, function(error, response, body) {
      if (error) {
        console.log(&amp;#39;Somethink is wrong with your CI =(&amp;#39;);
        return;
      }&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  if(body.indexOf(&amp;amp;#39;Success&amp;amp;#39;) !== -1) {
    console.log(&amp;amp;#39;Your CI is ok!&amp;amp;#39;);

    ledSuccess.on();
    ledError.off();

  } else {
    console.log(&amp;amp;#39;Somethink is wrong with your CI =(. Fix it!!!!&amp;amp;#39;);

    ledSuccess.off();
    ledError.on();
  }

});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;}, CONFIG.INTERVAL);&lt;/p&gt;

&lt;p&gt;});&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/willmendesneto/b5f92a932ec3b7ffadd0.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Como vocês podem ver a interface do Johnny-Five é bem intuitiva. Ele possui o evento &lt;code&gt;board.on(&amp;#39;ready&amp;#39;)&lt;/code&gt; que é similar ao evento &lt;code&gt;$(document).ready()&lt;/code&gt; do jQuery. Quando todo o ambiente está preparado, iniciamos com base no conteúdo desta função.&lt;/p&gt;

&lt;p&gt;Agora basta plugarmos 2 leds: 1 vermelha (para sinalizar o build quebrado) e 1 verde (para sinalizar o build sem problemas). Colocamos o build de sucesso na porta de número 12 + uma porta GND do nosso Arduino e o build de erro na porta de número 10 + uma porta GND do nosso Arduino, como podem ver na imagem.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/connecting-arduino-leds.png&quot; alt=&quot;Conectando o Arduino: portas e LEDS&quot;&gt;&lt;/p&gt;

&lt;p&gt;A partir daí criamos uma requisição para pegar o conteúdo via GET no &lt;a href=&quot;https://snap-ci.com/&quot;&gt;SNAP-CI&lt;/a&gt;, o nosso serviço de integração contínua. O SNAP-CI utiliza um conceito de build pipeline que é bem interessante e um dos prós dele é o de feedbacks mais rápidos (dando a possibilidade de paralelismo ou não) e definição de etapas para o build total. &lt;a href=&quot;http://www.martinfowler.com/articles/continuousIntegration.html&quot;&gt;Para maiores informações sobre Build Pipeline recomendo esta leitura&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Vamos no site do SNAP-CI, efetuamos o login (caso não tenha cadastro você terá que criar um, mas é bem rápido =) ) e cadastramos um projeto.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/snap-ci-setup-repo.png&quot; alt=&quot;SNAP-CI &amp;quot;Adicionar novo Repositório&amp;quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/snap-ci-choosing-repo.png&quot; alt=&quot;Adicionando Repositório para integração&quot;&gt;&lt;/p&gt;

&lt;p&gt;Ao cadastrar o projeto ele vai aparecer na parte superior, à direita, um campo com o nome &amp;quot;CCTray&amp;quot; que, ao clicarmos, direciona para o arquivo XML com as informações do build.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/snap-ci-cctray.png&quot; alt=&quot;SNAP-CI: Alerta CCTray&quot;&gt;&lt;/p&gt;

&lt;p&gt;São estas informações que serão consultadas pelo nosso build-checker.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/snap-ci-build-xml.png&quot; alt=&quot;Arquivo &amp;quot;cctray.xml&amp;quot; com as informações do BUILD&quot;&gt;&lt;/p&gt;

&lt;p&gt;Ele consultará os dados em um intervalo de 500 milisegundos previamente configurado e verifica o estado atual do build, baseado nas informações de todas as pipelines. Caso não haja a palavra &amp;quot;Success&amp;quot; no response da requisição, algo de errado aconteceu e o nosso build-checker irá acender a luz vermelha, caso contrário a luz verde continua acesa, sinalizando que está tudo ok.&lt;/p&gt;

&lt;p&gt;Para conferirmos o resultado final, basta rodarmos os comandos&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install &lt;span class=&quot;c&quot;&gt;# instala todas as dependências do projeto&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;node index.js &lt;span class=&quot;c&quot;&gt;# roda o código do build checker&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Caso queiram saber mais sobre o projeto, &lt;a href=&quot;https://github.com/willmendesneto/build-checker&quot;&gt;cliquem aqui e o projeto Build-Checker no github&lt;/a&gt;. O código é open-source, então sintam-se à vontade para feedbacks, sugestões e críticas construtivas. Lembrando também que estrelas no github são sempre bem vindas também!&lt;/p&gt;

&lt;p&gt;Este projeto foi baseado no projeto &lt;a href=&quot;https://www.youtube.com/watch?v=1EGk2rvZe8A&quot;&gt;Relatiation&lt;/a&gt;, feito pelo pessoal do Github para verificar a situação do build no Jenkins e dar um feedback ao time. Fica a dica deste vídeo bem simples e bacana mostrando como o Retaliation funciona.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=1EGk2rvZe8A&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/1EGk2rvZe8A/0.jpg&quot; alt=&quot;Retaliation&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;Conclusão&lt;/h1&gt;

&lt;p&gt;Este é um projeto bem introdutório do poder nos &lt;a href=&quot;https://nodebots.io/&quot;&gt;NodeBots&lt;/a&gt;, utilizando um dos exemplos mais simples para introdução ao Arduino, que é o código que faz com que uma led pisque (caso tenha interesse em ver como este código funciona, pesquise por &amp;quot;blink&amp;quot;). Este exemplo de led piscando é algo totalmente didático, mas ao utilizarmos NodeJS percebemos todo o poder que temos para aliar vários conceitos juntamente a um dos exemplos mais clássicos do Arduino. A partir daí é com você.&lt;/p&gt;

&lt;p&gt;E aí? O que você tem feito com &lt;a href=&quot;https://nodebots.io/&quot;&gt;NodeBots&lt;/a&gt;, Javascript e/ou Arduino? Compartilhe sua experiência!&lt;/p&gt;

&lt;p&gt;Links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build Checker: &lt;a href=&quot;https://github.com/willmendesneto/build-checker&quot;&gt;http://github.com/willmendesneto/build-checker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Johnny-Five: &lt;a href=&quot;https://johnny-five.io/&quot;&gt;http://johnny-five.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SNAP-CI: &lt;a href=&quot;https://snap-ci.com/&quot;&gt;https://snap-ci.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Arduino: &lt;a href=&quot;https://www.arduino.cc/&quot;&gt;https://www.arduino.cc/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NodeBots: &lt;a href=&quot;https://nodebots.io/&quot;&gt;http://nodebots.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Build Pipeline: &lt;a href=&quot;http://www.martinfowler.com/articles/continuousIntegration.html&quot;&gt;http://www.martinfowler.com/articles/continuousIntegration.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Retaliation: &lt;a href=&quot;https://www.youtube.com/watch?v=1EGk2rvZe8A&quot;&gt;https://www.youtube.com/watch?v=1EGk2rvZe8A&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 28 Oct 2015 00:00:00 +0000</pubDate>
        <link>http://willmendesneto.github.io/2015/10/28/checando-sua-build-pipeline-no-snap-ci-via-nodebots-utilizando-nodejs-e-arduino</link>
        <guid isPermaLink="true">http://willmendesneto.github.io/2015/10/28/checando-sua-build-pipeline-no-snap-ci-via-nodebots-utilizando-nodejs-e-arduino</guid>
        
        <category>nodebots</category>
        
        <category>arduino</category>
        
        <category>nodejs</category>
        
        
        <category>frontend</category>
        
        <category>nodebots</category>
        
        <category>nodejs</category>
        
      </item>
    
      <item>
        <title>Multiple credentials check with Basic Auth</title>
        <description>&lt;h2&gt;INTRODUCTION&lt;/h2&gt;

&lt;p&gt;The idea of this post is be simple, but helpful. In a specific app was needed a first check based in http authentication via browser based in first page load and in some user operations.&lt;/p&gt;

&lt;p&gt;There are a lot of node package that give for us a API with certain contracts, but jus based in only one user credentials.&lt;/p&gt;

&lt;h2&gt;BASIC-AUTH MIDDLEWARE&lt;/h2&gt;

&lt;p&gt;This idea uses the &lt;a href=&quot;https://en.wikipedia.org/wiki/Basic_access_authentication&quot;&gt;HTTP Basic access authentication&lt;/a&gt; implementation, that is a simplest technique for enforce access controls to web resource. This approach uses static and standard fields passed in requests via HTTP headers. Because this doesn&amp;#39;t require cookies, session identifier or login pages.&lt;/p&gt;

&lt;p&gt;For attend this specifications, we will use the &lt;a href=&quot;http://github.com/jshttp/basic-auth&quot;&gt;basic-auth node package&lt;/a&gt;. This is very simple, but not attend our specs by default, so one approach is create an abstraction for this module.&lt;/p&gt;

&lt;p&gt;For this case we will use this abstraction, passing via callback for requests that need check user(s).&lt;/p&gt;

&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;&amp;#39;use strict&amp;#39;;&lt;/p&gt;

&lt;p&gt;/**
 *  Multiple credentials check with Basic Auth node package
 * 
 *  How to use (ExpresJS example):
 *
 *  var BASIC&lt;em&gt;AUTH = [
 *    {
 *      name: process.env.BASIC&lt;/em&gt;AUTH&lt;em&gt;USERNAME, 
 *      pass: process.env.BASIC&lt;/em&gt;AUTH&lt;em&gt;PASSWORD
 *    },
 *    {
 *      name: process.env.BASIC&lt;/em&gt;AUTH&lt;em&gt;USERNAME2, 
 *      pass: process.env.BASIC&lt;/em&gt;AUTH&lt;em&gt;PASSWORD2
 *    }
 *  ];
 * 
 *  var basicAuthMultipleCredentials = require(&amp;#39;./basic-auth-multiple-credentials&amp;#39;);
 *  router.get(&amp;#39;/multiple-credential-check&amp;#39;, basicAuthMultipleCredentials(BASIC&lt;/em&gt;AUTH), function(req, res) {
 *    // ... your code
 *  });
 * 
 * router.get(&amp;#39;/single-credential-check&amp;#39;, basicAuthMultipleCredentials(BASIC_AUTH[0]), function(req, res) {
 *    // ... your code
 *  });
 */&lt;/p&gt;

&lt;p&gt;var auth = require(&amp;#39;basic-auth&amp;#39;);&lt;/p&gt;

&lt;p&gt;module.exports = function(usersAndPasswords) {
  if (!(usersAndPasswords instanceof Array)) {
    usersAndPasswords = [usersAndPasswords];
  }&lt;/p&gt;

&lt;p&gt;return function(req, res, next) {
    var credentials = auth(req);
    var authenticated = function(credentials){
      return usersAndPasswords.filter(function(registeredUser) {
        return credentials.name === registeredUser.name &amp;amp;&amp;amp; 
              credentials.pass === registeredUser.pass;
      }).length === 1;
    };&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;if (!credentials || !authenticated(credentials)) {
  res.statusCode = 401;
  res.setHeader(&amp;amp;#39;WWW-Authenticate&amp;amp;#39;, &amp;amp;#39;Basic realm=&amp;amp;quot;example&amp;amp;quot;&amp;amp;#39;);
  res.end(&amp;amp;#39;Access denied&amp;amp;#39;);
} else {
  next();
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;};
};
&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/willmendesneto/5af17f5ef8f1c3957a2c.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;h2&gt;CONCLUSION&lt;/h2&gt;

&lt;p&gt;This approach is very simple and it&amp;#39;s not recommended if you need of a high level of security. But in some cases that you need check user credentials in one more layer (checking in other layers/ways too) can be very useful.&lt;/p&gt;

&lt;p&gt;Thanks and see you soon!&lt;/p&gt;

&lt;p&gt;Links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic-Auth: &lt;a href=&quot;http://github.com/jshttp/basic-auth&quot;&gt;http://github.com/jshttp/basic-auth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Basic Access Authentication: &lt;a href=&quot;https://en.wikipedia.org/wiki/Basic_access_authentication&quot;&gt;https://en.wikipedia.org/wiki/Basic&lt;em&gt;access&lt;/em&gt;authentication&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 09 Jul 2015 00:00:00 +0000</pubDate>
        <link>http://willmendesneto.github.io/2015/07/09/multiple-credentials-check-with-basic-auth</link>
        <guid isPermaLink="true">http://willmendesneto.github.io/2015/07/09/multiple-credentials-check-with-basic-auth</guid>
        
        <category>nodejs,</category>
        
        <category>javascript,</category>
        
        <category>backend</category>
        
        
        <category>nodejs,</category>
        
        <category>javascript,</category>
        
        <category>backend</category>
        
      </item>
    
      <item>
        <title>Micro tunings em Angular apps - Pt 1</title>
        <description>&lt;p&gt;&lt;a class=&quot;page-link&quot; href=&quot;/2015/05/11/micro-tunnings-with-angular-apps-part-1/&quot;&gt;Veja a versão em inglês&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;INTRODUÇÃO&lt;/h2&gt;

&lt;p&gt;Muitas aplicações estão usando Angular como framework Frontend e isso é muito bom, mas com o passar do tempo e evolução do software outros aspectos do produto/serviço possuem importância fundamental também, como manutenibilidade e... performance, claro!&lt;/p&gt;

&lt;p&gt;Mas quando falamos sobre performance, quais são as (re)soluções que voê tem em mente?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mais máquinas?&lt;/li&gt;
&lt;li&gt;Mais cache?&lt;/li&gt;
&lt;li&gt;Mais minificação/compressão?&lt;/li&gt;
&lt;li&gt;Mais chamadas assíncronas?&lt;/li&gt;
&lt;li&gt;Utilizar HTTP2?&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Não esconda os seus problemas&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sim, todos estes são idéias sensacionais, mas &lt;strong&gt;não resolvem o problema realmente&lt;/strong&gt;. Porque não? Todas estas idéias são &lt;strong&gt;paliativos&lt;/strong&gt;, porque you nunca está atacando o real problema, com o tempo, ele irá aparecer novamente.&lt;/p&gt;

&lt;h2&gt;REAL-TIME WEB - CONCEITOS&lt;/h2&gt;

&lt;p&gt;Angular é utilizado em vários apps, incluindo apps que trabalham com tempo real, seja usando web socket ou tree way data binding (com Firebase, por exemplo). Mas antes de tudo isso vamos conhecer alguns aspectos mais teóricos, certo?&lt;/p&gt;

&lt;p&gt;Quando o usuário acessa sua aplicação e os dados são atualizados em uma velocidade &amp;lt;= 100 milisegundos: isto sim é o que conhecemos como tempo real.&lt;/p&gt;

&lt;p&gt;Atualmente tempo real não existe. O que existe é um tipo de &amp;quot;truque&amp;quot;, já que o nosso cérebro não consegue processar tudo o que acontece neste período de tempo. Por causa disso ele entende que tudo acontece em tempo real.&lt;/p&gt;

&lt;p&gt;Two-way data binding ajuda bastante nesta tarefa, já que no Angular ele é baseado no &lt;a href=&quot;http://en.wikipedia.org/wiki/Hollywood_principle&quot;&gt;princípio de Hollywood&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Devs não precisam entender como funciona o Two-way data binding por debaixo dos panos, inicialmente.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sim, isto é verdade, mas quando você tem uma aplicação com muitos bindings todos os tipos de truques são bem vindos, como:&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Minimize bindings e watchers&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Sempre que puder, minimize bindings e watchers, tente utilizar &lt;code&gt;Object.freeze&lt;/code&gt; (&lt;a href=&quot;http://jsperf.com/freeze-vs-seal-vs-normal/19&quot;&gt;dê uma olhada nesta comparação entre &lt;code&gt;Object.freeze&lt;/code&gt;, &lt;code&gt;Object.seal&lt;/code&gt; e Json object com comportamento padrão no jsperf&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;ng-if ao invés de ng-show&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Use ng-if ao invés de ng-show sempre que puder, já que o  ng-show manipula o atributo &lt;code&gt;display&lt;/code&gt;do elemento, but o mesmo já existe no DOM e o two-way data binding já está ativo, o que impacta na performance.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-if=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;!vm.usingOneTimeBinding&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    Makes more sense
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-show=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;!vm.usingOneTimeBinding&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    Please, avoid this approach
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;strong&gt;$filter + two-way data binding === não, por favor!&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Manipule os dados uma única vez e ao invés de utilizar o service $filter no template;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;eu&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;ea&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;William&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Wallace&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Baseado nestes dados, ao invés de utilizar um $filter no template HTML...&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;item in vm.users&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;... com isso os efeitos na performance são bem consideráveis quando você faz o tratamento antes...&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/using-filters-in-template.png&quot; alt=&quot;Quando você usa o filter no template&quot;&gt;&lt;/p&gt;

&lt;p&gt;... ao invés disso, manipule a stream de dados no controller/service/etc, passando os dados com o seu formato final esperado para somente serem renderizados no template. Neste exemplo usamos a função &lt;code&gt;.map()&lt;/code&gt; do javascript para isso.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;item in vm.users&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;strong&gt;ngRepeat + Track by&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Track by em elementos são sempre bem vindos! &lt;code&gt;ngRepeat&lt;/code&gt; é mais performático quando utiliza algo para indexar os elementos.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- sem track by --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;item in vm.users&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- com track by --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;item in vm.users track by $index&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Em um simples exemplo com e sem a utilização do &lt;code&gt;ngRepeat + Track by&lt;/code&gt; os resultados são bem expressivos (Baseado em uma lista com 10 elementos somente. Imagine então em uma lista com mais elementos).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ng-repeat-track-by-comparison.png&quot; alt=&quot;Comparação do template com ngRepeat e track by&quot;&gt;&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;One-time-binding usage&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Use one-time-binding sempre que puder, seu app e os usuários ficarão eternamente gratos!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;item in ::vm.users track by $index&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-if=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;::vm.users.loggedIn&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;::{ &amp;#39;my-awesome-class&amp;#39;: vm.users.loggedIn}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Use async patterns&lt;/h3&gt;

&lt;p&gt;Em qualquer app que usa ou é baseado em javascript, é sempre bom o uso de patterns assíncronos. Patterns como &lt;code&gt;debounce&lt;/code&gt; são muito fáceis de serem implementados e adicionados graças a diretiva &lt;code&gt;ngModelOptions&lt;/code&gt;. Esta diretiva habilita patterns assíncronos, dando mais poder ao seu app.&lt;/p&gt;

&lt;p&gt;Debounce é um pattern utilizado para verificar quantas vezes o evento/método foi chamado em sua aplicação. Um exemplo de como utilizá-lo é pensarmos em uma simples de busca em uma lista de itens.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;autocomplete=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;off&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;form&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;form-group&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;fieldset&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;search&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;search&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;search&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Search...&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;vm.searchItem&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;form-control&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/fieldset&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;item in vm.users | myFilter:vm.searchItem&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Neste exemplo a busca será chamada cada vez que o usuário adicionar ou remover um caracter no campo de busca do formulário. Mas isso não é uma boa idéia, então vamos dar uma olhada agora e ver como ficaria este exemplo usando &lt;code&gt;debounce&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myModelOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;updateOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;keydown blur&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;debounce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;keydown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//for search we don&amp;#39;t want to update server during user type&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;blur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//when user move on to the next field, we update immediately&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;autocomplete=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;off&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;form&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;form-group&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;fieldset&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;search&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;search&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;search&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Search...&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;vm.searchItem&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;form-control&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model-options=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;vm.myModelOptions&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/fieldset&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;item in vm.users | myFilter:vm.searchItem&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Desta forma o evento/método de busca será disparado somente após 250 milisegundos do evento de &lt;code&gt;keydown&lt;/code&gt; ou &lt;code&gt;blur&lt;/code&gt; serem acionados. O número que foi impresso no DevTools é baseado na inserção de somente 3 caracteres no formulário de busca.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/debounce-comparison.png&quot; alt=&quot;Comparação: busca utilizando Debounce e busca padrão&quot;&gt;&lt;/p&gt;

&lt;p&gt;Para o patter &lt;code&gt;memoization&lt;/code&gt;, a abordagem de utilização do &lt;code&gt;$provide.decorator()&lt;/code&gt; é uma tática excelente, já que ele modifica o comportamente padrão de componentes angular, melhorando e habilitando cache por padrão ou outras possibilidades, por exemplo.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Creating a new module for enable cache by default&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;perf.rootScope&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// $rootScope modified&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;decorate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;$rootScope&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__proto__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$watch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;$delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__proto__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$apply&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;myApp&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;perf.rootScope&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;CONCLUSÃO&lt;/h2&gt;

&lt;p&gt;Neste primeiro post falamos sobre conceitos de Tempo Real e alguns aspectos sobre micro tunagens mais simples, como boas práticas sobre como utilizar componentes do core do angular, otimizações Javascript e padrões (funcionais e assíncronos). No próximo post vamos falar sobre outros conceitos como estrutura de dados imutáveis, como utilizá-lo em seu app, bibliotecas que podem nos ajudar nesta etapa.&lt;/p&gt;

&lt;p&gt;Você utiliza este ou outros métodos? Comente e compartilhe a sua experiência aqui.&lt;/p&gt;

&lt;p&gt;Obrigado e até mais!&lt;/p&gt;

&lt;p&gt;Links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Princípio de Hollywood: &lt;a href=&quot;http://en.wikipedia.org/wiki/Hollywood_principle&quot;&gt;http://en.wikipedia.org/wiki/Hollywood_principle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JsPerf: Object.freeze, Object.seal and object with default behaviour: &lt;a href=&quot;http://jsperf.com/freeze-vs-seal-vs-normal/19&quot;&gt;http://jsperf.com/freeze-vs-seal-vs-normal/19&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 28 Jun 2015 00:00:00 +0000</pubDate>
        <link>http://willmendesneto.github.io/2015/06/28/micro-tunings-em-angular-apps-pt-1</link>
        <guid isPermaLink="true">http://willmendesneto.github.io/2015/06/28/micro-tunings-em-angular-apps-pt-1</guid>
        
        <category>performance,</category>
        
        <category>frontend,</category>
        
        <category>angular,</category>
        
        <category>web</category>
        
        <category>performance,</category>
        
        <category>tips,</category>
        
        <category>tricks</category>
        
        
        <category>performance,</category>
        
        <category>frontend,</category>
        
        <category>angular</category>
        
      </item>
    
      <item>
        <title>Micro tunnings with Angular apps - Part 2</title>
        <description>&lt;h2&gt;INTRODUCTION&lt;/h2&gt;

&lt;p&gt;In last post we talking about real-time web concepts, angular best practices, one-time-binding and how to integrate javascript async patterns in angular apps. Now lets take a look in some aspects of functional programming. So let&amp;#39;s go?&lt;/p&gt;

&lt;h2&gt;FUNCTIONAL PROGRAMMING - CONCEPTS&lt;/h2&gt;

&lt;p&gt;Here I will talk about functional programming concepts in angular apps.&lt;/p&gt;

&lt;h2&gt;IMMUTABLE DATA STRUCTURE&lt;/h2&gt;

&lt;p&gt;An immutable data are based in a data structure that can&amp;#39;t be modified in any way after its creation. The only way to effective modify it would be to make a mutable copy or something similar (slightly modifying the parameters you pass to the constructor of the new one). One of the most caracteristics of these structure are the thread safe behaviour (if you can&amp;#39;t modify/update the data, you can understand too that your data is really safe of corruption) and your usage for hash keys.&lt;/p&gt;

&lt;p&gt;Thinking in Javascript, your first attempt was &lt;a href=&quot;http://swannodette.github.io/mori/&quot;&gt;MoriJS project&lt;/a&gt;, a library based in ClojureScript using immutability concepts. But this idea will be more familiar in front-end via &lt;a href=&quot;http://facebook.github.io/immutable-js/&quot;&gt;ImmutableJS project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lee Byron, Interactive Information Designer at Facebook says in the first time that show Immutable JS in public:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Immutable js fits better with the rest of the JS ecosystem in my opinion, because it is designed for and written in JS, rather than ClojureScript. The API follows the native Array API where possible, so it&amp;#39;s  a lot easier to switch between the two&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using a simple approach, we can take a look in results when we use immutable js instead mori js in our apps:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/immutable-vs-mori.png&quot; alt=&quot;ImmutableJS versus MoriJS: Comparison&quot; title=&quot;ImmutableJS versus MoriJS: Comparison&quot;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;More informations in &lt;a href=&quot;http://jsperf.com/immutablejs-versus-morijs&quot;&gt;http://jsperf.com/immutablejs-versus-morijs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;HOW TO USE THIS CONCEPTS IN ANGULAR APPS&lt;/h2&gt;

&lt;p&gt;Thinking in improve more performance and give a simple way to use this library in angular apps, Minko Gechev create angular-immutable module. The idea of this module is simplify the $digest cycle of the data manipulated for angular apps.&lt;/p&gt;

&lt;p&gt;Some points in this approach in angular apps:&lt;/p&gt;

&lt;p&gt;Goods&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Performance improvements when app work with bigger informations;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bads&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Less performatic when app work with few informations;&lt;/li&gt;
&lt;li&gt;Insert more complexity in your app;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Please take a look in your post &lt;a href=&quot;http://blog.mgechev.com/2015/03/02/immutability-in-angularjs-immutablejs/&quot;&gt;&amp;quot;Boost the Performance of an AngularJS Application Using Immutable Data&amp;quot;&lt;/a&gt; for more detailed informations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;REACTIVE PROGRAMMING: A WORLD WITH GOOD NEWS&lt;/h2&gt;

&lt;p&gt;Reactive programming, in resume, is a programming paradigm oriented around data flows and the propagation of change. This is not a new idea or concept, but return with a new approach via &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React JS&lt;/a&gt; and Flux/Reflux.&lt;/p&gt;

&lt;p&gt;Your algorithm is considered the most performatic when we talking about DOM rendering actually (AngularJS 2 will be using WebWorker for DOM rendering and give many performance improvements).&lt;/p&gt;

&lt;p&gt;There are many approaches for your utilization integrating with front-end frameworks, such as Ember, Backbone and Angular. For Angular specifically has a module ngReact that help in this work, integrating React components via directive in angular apps.&lt;/p&gt;

&lt;p&gt;Let me show you a simple example. We have 2 directives: one with ReactJS and another without. Based in a simple Devtools profiler for this example the results are:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// without react&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;angularPerformanceApp&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;directive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;myMessage&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;div&amp;gt;Hello &amp;lt;/div&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;restrict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/without-react.png&quot; alt=&quot;Using Angular directives&quot; title=&quot;Using Angular directives&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// with react&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;angularPerformanceApp&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;directive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;myReactMessage&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;DOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({},&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;vm.message&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oldVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;renderComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;example&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/with-react.png&quot; alt=&quot;Using React JS&quot; title=&quot;Using React JS&quot;&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Angular and React teams are sharing ideas about new steps (performance, DOM rendering, coesion and other aspects) and ideas about these projects and the resolutions are shared with community&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;CONCLUSION&lt;/h2&gt;

&lt;p&gt;In this post, was approached the Functional programming concepts and some simple aspects about immutable data structure, how to use in app and libraries for help in this work.&lt;/p&gt;

&lt;p&gt;In next post we will talking about test performance: Why we have that focuses on performance in this step too, what are the good practices in unit and end-to-end tests, tips and tricks.&lt;/p&gt;

&lt;p&gt;Do you use other methods? Comment and share your experience here.&lt;/p&gt;

&lt;p&gt;Thanks and see you very soon!&lt;/p&gt;

&lt;p&gt;Links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mori JS: &lt;a href=&quot;http://swannodette.github.io/mori/&quot;&gt;http://swannodette.github.io/mori/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Immutable JS: &lt;a href=&quot;http://facebook.github.io/immutable-js/&quot;&gt;http://facebook.github.io/immutable-js/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JSPerf: ImmutableJS x MoriJS: &lt;a href=&quot;http://jsperf.com/immutablejs-versus-morijs&quot;&gt;http://jsperf.com/immutablejs-versus-morijs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Boost the Performance of an AngularJS Application Using Immutable Data: &lt;a href=&quot;http://blog.mgechev.com/2015/03/02/immutability-in-angularjs-immutablejs/&quot;&gt;http://blog.mgechev.com/2015/03/02/immutability-in-angularjs-immutablejs/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;React JS: &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;http://facebook.github.io/react/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 22 Jun 2015 00:00:00 +0000</pubDate>
        <link>http://willmendesneto.github.io/2015/06/22/micro-tunnings-with-angular-apps-part-2</link>
        <guid isPermaLink="true">http://willmendesneto.github.io/2015/06/22/micro-tunnings-with-angular-apps-part-2</guid>
        
        <category>performance,</category>
        
        <category>frontend,</category>
        
        <category>angular,</category>
        
        <category>web</category>
        
        <category>performance,</category>
        
        <category>tips,</category>
        
        <category>tricks</category>
        
        
        <category>performance,</category>
        
        <category>frontend,</category>
        
        <category>angular</category>
        
      </item>
    
      <item>
        <title>Micro tunnings with Angular apps - Part 1</title>
        <description>&lt;p&gt;&lt;a class=&quot;page-link&quot; href=&quot;/2015/06/28/micro-tunings-em-angular-apps-pt-1/&quot;&gt;Read the Brazillian Portuguese version&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;INTRODUCTION&lt;/h2&gt;

&lt;p&gt;Many applications are using angular for frontend and it&amp;#39;s really awesome. But with time and software evolution other aspects about product/service are (more) importants too, such as manutenibility and...performance.&lt;/p&gt;

&lt;p&gt;But when you think about performance, what are you remember like (re)solution?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;++ machines?&lt;/li&gt;
&lt;li&gt;++ cache?&lt;/li&gt;
&lt;li&gt;++ file minification/compression?&lt;/li&gt;
&lt;li&gt;++ use more async calls?&lt;/li&gt;
&lt;li&gt;++ HTTP2 usage?&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Don&amp;#39;t hide the problem&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes, all of these are good ideas, but &lt;strong&gt;doesn&amp;#39;t resolve the core problem&lt;/strong&gt;. Why not? All these ideas are &lt;strong&gt;paliatives&lt;/strong&gt;, because you never attack the real problem and it will appear again in some moment.&lt;/p&gt;

&lt;h2&gt;REAL-TIME WEB - CONCEPTS&lt;/h2&gt;

&lt;p&gt;Angular is used for various apps including real time webapps, using websockets and three way data binding with Firebase, for example. But firstly, let&amp;#39;s understand some theorical aspects.&lt;/p&gt;

&lt;p&gt;When user access your app and the data are updated in a velocity &amp;lt;= 100 miliseconds: this is real-time. Real-time (for now) don&amp;#39;t exist. What exist is a &amp;quot;brain hack&amp;quot; because your brain can&amp;#39;t proccess all that happens in this time, because this it understood such if all behaviours are happening in real time, passing this idea.&lt;/p&gt;

&lt;p&gt;Two-way data binding help in this task, based in more &lt;a href=&quot;hollywood%20principle&quot;&gt;hollywood-principle&lt;/a&gt; possible.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The developers don&amp;#39;t need understand how two-way data binding works in background initially&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes, it&amp;#39;s true, but when you have an app with many bindings all tips are welcome, such as:&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Minimize bindings and watchers&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Ever that can, minimize bindings and watchers, &lt;code&gt;Object.freeze&lt;/code&gt; usage &lt;a href=&quot;take%20a%20look%20in%20jsperf%20comparison%20between%20%60Object.freeze%60,%20%60Object.seal%60%20and%20object%20with%20default%20behaviour&quot;&gt;jsperf-object-freeze&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;ng-if instead ng-show&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Use ng-if instead ng-show when you can, because ng-show manipulate element display, but it already exist in DOM and two-way data binding already active, decreasing performance.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-if=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;!vm.usingOneTimeBinding&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    Makes more sense
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-show=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;!vm.usingOneTimeBinding&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    Please, avoid this approach
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;strong&gt;$filter + two-way data binding === no!&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Manipulate data in a once moment and pass the data for template instead $filter&amp;#39;s usage in template;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;eu&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;ea&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;William&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Wallace&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Based in this data, avoid use filter in template...&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;item in vm.users&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;... because the effect in your performance is very considerable...&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/using-filters-in-template.png&quot; alt=&quot;When use filter comparison&quot;&gt;&lt;/p&gt;

&lt;p&gt;... instead this manipulate the stream&amp;#39;s data in controller, passing the data in your final format only for render in template. In this example is used &lt;code&gt;.map()&lt;/code&gt; javascript function for it.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;item in vm.users&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;strong&gt;ngRepeat + Track by&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Track by in elements are always welcome! ngRepeat is more fast when tracking something.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Without track by --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;item in vm.users&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- With track by --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;item in vm.users track by $index&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In a simple example with and without &lt;code&gt;ngRepeat + Track by&lt;/code&gt; the results are very expressives&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ng-repeat-track-by-comparison.png&quot; alt=&quot;ngRepeat track by usage comparison&quot;&gt;&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;One-time-binding usage&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Use one-time-binding when you can, your app and your users are grateful for it!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;item in ::vm.users track by $index&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-if=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;::vm.users.loggedIn&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;::{ &amp;#39;my-awesome-class&amp;#39;: vm.users.loggedIn}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Use async patterns&lt;/h3&gt;

&lt;p&gt;In all javascript apps, ever use async patterns for help your life. In angular apps patterns like debounce are very easier to implement and add because &lt;code&gt;ngModelOptions&lt;/code&gt; directive. This directive enable async patterns in components in a powerful way.&lt;/p&gt;

&lt;p&gt;Debounce is a pattern for how many times the event/method will be called in your application. A example of your usage is a simple search in a list.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;autocomplete=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;off&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;form&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;form-group&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;fieldset&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;search&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;search&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;search&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Search...&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;vm.searchItem&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;form-control&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/fieldset&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;item in vm.users | myFilter:vm.searchItem&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this example the search will be called each user add character in input for search. But this isn&amp;#39;t a good idea. So let&amp;#39;t take a look in debounce usage.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myModelOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;updateOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;keydown blur&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;debounce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;keydown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//for search we don&amp;#39;t want to update server during user type&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;blur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;250&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//when user move on to the next field, we update immedately&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;autocomplete=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;off&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;form&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;form-group&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;fieldset&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;search&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;search&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;search&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Search...&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;vm.searchItem&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;form-control&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model-options=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;vm.myModelOptions&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/fieldset&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;item in vm.users | myFilter:vm.searchItem&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This way the search method/event is dispatched only after 250 miliseconds when triggered via keydown or blur events. The number, based in 3 characters are inserted for search is this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/debounce-comparison.png&quot; alt=&quot;With and Without Debounce usage comparison&quot;&gt;&lt;/p&gt;

&lt;p&gt;For memoization pattern you can use &lt;code&gt;$provide.decorator()&lt;/code&gt; approach, modifying default behaviour of angular, improving and enable cache by default or other possibilities, for example.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Creating a new module for enable cache by default&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;perf.rootScope&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// $rootScope modified&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;decorate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;$rootScope&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__proto__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$watch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;$delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__proto__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$apply&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;myApp&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;perf.rootScope&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;CONCLUSION&lt;/h2&gt;

&lt;p&gt;In this first post, was approached the Real-time concept and some simple aspects about microtunnings, such best practices about angular core components, javascript optimizations, functional and async patterns usage. In next step the target are concepts about immutable data structure, how to use in app, libraries for help in this work.&lt;/p&gt;

&lt;p&gt;Do you use other methods? Comment and share your experience here.&lt;/p&gt;

&lt;p&gt;Thanks and see you very soon!&lt;/p&gt;

&lt;p&gt;Links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hollywood Principle: &lt;a href=&quot;http://en.wikipedia.org/wiki/Hollywood_principle&quot;&gt;http://en.wikipedia.org/wiki/Hollywood_principle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JsPerf comparison: Object.freeze, Object.seal and object with default behaviour: &lt;a href=&quot;http://jsperf.com/freeze-vs-seal-vs-normal/19&quot;&gt;http://jsperf.com/freeze-vs-seal-vs-normal/19&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 11 May 2015 00:00:00 +0000</pubDate>
        <link>http://willmendesneto.github.io/2015/05/11/micro-tunnings-with-angular-apps-part-1</link>
        <guid isPermaLink="true">http://willmendesneto.github.io/2015/05/11/micro-tunnings-with-angular-apps-part-1</guid>
        
        <category>performance,</category>
        
        <category>frontend,</category>
        
        <category>angular,</category>
        
        <category>web</category>
        
        <category>performance,</category>
        
        <category>tips,</category>
        
        <category>tricks</category>
        
        
        <category>performance,</category>
        
        <category>frontend,</category>
        
        <category>angular</category>
        
      </item>
    
      <item>
        <title>Using Travis-CI for run AngularJS unit tests</title>
        <description>&lt;h2&gt;INTRODUCTION&lt;/h2&gt;

&lt;p&gt;Used in opensource projects, Travis-CI is a excellent solution for will used in projects for add continuous integrations of a simple way in you project and, it&amp;#39;s free!&lt;/p&gt;

&lt;p&gt;But in your AngularJS apps, you have to add karma for test runner and we have problems for run karma tests in browsers. For this, you should use some trick for run these tests.&lt;/p&gt;

&lt;h2&gt;TRAVIS-CI CONFIGURATION&lt;/h2&gt;

&lt;p&gt;First you have to create a login in Travis-CI with your github credentials. After this, you enable travis-ci to access your github repository and intercept the commits and pull requests and use travis-ci commands via web hook for run your commands list specified in a .yml file with name &lt;code&gt;.travis.yml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s take a look in a example of travis-ci configuration file for angularjs apps.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;node_js&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;node_js&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;0.10.33&amp;#39;&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;before_script&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;export&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;CHROME_BIN=chromium-browser&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;export&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;DISPLAY=:99.0&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;sh&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-e&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/etc/init.d/xvfb&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;start&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;npm&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-g&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;bower&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;karma&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;grunt-cli&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;jshint&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;npm&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;install&amp;#39;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# install npm packages&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;bower&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;install&amp;#39;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# install bower packages&lt;/span&gt;

&lt;span class=&quot;l-Scalar-Plain&quot;&gt;after_script&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;grunt&amp;#39;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# or other command for build, run tests, etc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This file specifally has 3 points that should be explained:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;language: In this line we choice what language travis-ci will be use for run your commands specified;&lt;/li&gt;
&lt;li&gt;before_script: All commands that will run before the main command. Normally in this point is inserted all commands for bootstrap your test environment. In this code block we enable the Chrome and Firefox browsers for will be useds in our tests;&lt;/li&gt;
&lt;li&gt;after_script: The commands that will be executeds for validate the send code. If the return of these commands will be &lt;code&gt;true&lt;/code&gt;, the code was accept, if not will show in repository that your code have problems that you have to fix them;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you would like to know more about these specifications please take a look in &lt;a href=&quot;http://docs.travis-ci.com&quot;&gt;travis-ci documentation&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;CONCLUSION&lt;/h2&gt;

&lt;p&gt;The use of any tool for automate your code integration is a best practice and Travis-CI is a good and concise tool for it, but remember that if you need of a more elaborated integration, testing many kinds of browsers, you have to combine with other tools for it, such as saucelabs (AWESOME TOOL), for example.&lt;/p&gt;

&lt;p&gt;Use other tools for use continuous integration in your applications? Comment and share your experience here.&lt;/p&gt;

&lt;p&gt;Thanks and see you very soon!&lt;/p&gt;

&lt;p&gt;Links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Travis-CI Documentation: &lt;a href=&quot;http://docs.travis-ci.com&quot;&gt;http://docs.travis-ci.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 16 Feb 2015 00:00:00 +0000</pubDate>
        <link>http://willmendesneto.github.io/2015/02/16/using-travis-ci-for-run-angularjs-unit-tests</link>
        <guid isPermaLink="true">http://willmendesneto.github.io/2015/02/16/using-travis-ci-for-run-angularjs-unit-tests</guid>
        
        <category>tags</category>
        
        
        <category>travis-ci</category>
        
        <category>unit-test</category>
        
        <category>workflow</category>
        
        <category>continuous</category>
        
        <category>integration</category>
        
        <category>opensource</category>
        
      </item>
    
      <item>
        <title>AngularJS: About E2E tests and Protractor - pt 2</title>
        <description>&lt;h2&gt;INTRODUCTION&lt;/h2&gt;

&lt;p&gt;This time we will know more about it with an overview in some aspects for Protractor usage in projects and best practices such as page objects, performance, cache, usage with nodejs and others.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Because best practices always are welcome!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Why Page Objects&lt;/h2&gt;

&lt;p&gt;Page Object is a object model with properties and methods, wrapping page elements and interactions event (click, submit, etc). Your objective is simplify the test scripts and upgrade your code reuse in end-to-end tests, reducing amount of duplicate code and centralyzing UI modifications and fixes in only one file.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s think in a scenario that you have to test one of your directives in diferent scenarios, working with others controllers, services and templates. If you have to write &lt;code&gt;element(by...)&lt;/code&gt; many times, the manutenability of your tests will not be so cool and ever that you have to take a look in them, your sensation will be something like this...&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ugly.gif&quot; alt=&quot;urgh!&quot; title=&quot;urgh!&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Using Page Objects&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A example of Page object construction&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PageObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// properties&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;property&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;property&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PageObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should use Page Objects in your application tests. It&amp;#39;s a best practice for manutenibility and sanity for your tests.&lt;/p&gt;

&lt;p&gt;Page Objects are useds for centralize the properties and methods of the website/system/app page. For example, if you have a form in your app, in this objects the properties will be form elements (inputs, selects, textboxes) and methods are the events of your form elements (click in button, blur in input element, change in select, etc).&lt;/p&gt;

&lt;p&gt;A simple example using Page Objects in your protractor tests.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;angularjs homepage todo list&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pageObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;page.js&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// before function&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;your-url&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;afterEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//after function&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Page Object should be &amp;quot;Angular Testing Recipes&amp;quot; in your text content by default&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pageObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Angular Testing Recipes&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Working with promises&lt;/h2&gt;

&lt;p&gt;All page events returns for you test like as promise. In this case, your have to resolve the promises get your result and finish your test correctly. For example&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;PageObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// your assertions are here&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;can be used this way too&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;PageObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// your assertions are here&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can use &lt;code&gt;waitForAngular()&lt;/code&gt; method for that Protractor waits for AngularJS event finalization.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;waitForAngular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;expect()&lt;/code&gt; method resolve the promises in your tests. For example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PageObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;your test&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Performance in your End to End Tests&lt;/h2&gt;

&lt;p&gt;Test your application with animation disabled. In many times has no sense to test your app with animations enabled and with this resource disabled the tests run more fast.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;allowAnimations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To disable angular debug informations is a best practice too, because you should use protractor debug for it.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$compileProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;debugInfoEnabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Using NodeJS in Protractor tests&lt;/h2&gt;

&lt;p&gt;In some cases you can the option of use NodeJS with protractor methods for more elaborated tests. In this example we are testing a ordenation click event in a tablesorter component, but using NodeJS for set table headers in our tests and caching table headers elements (get all elements that &lt;code&gt;by.css()&lt;/code&gt; method return, resolving your promise and managing tests based in &lt;code&gt;items&lt;/code&gt; values).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// spec.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;TableSorter: testing component&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tableSorter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;changes active table order based in user\&amp;#39;s choice&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.table-sorter-order&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;//  Testing all elements with ordenation method&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Email&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Testing Item &amp;quot;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;//  Order Asc&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ASC ordenation&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;tableSorter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.table-sorter-order.asc&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tableSorter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;//  Order Desc&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;DESC ordenation&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;tableSorter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.table-sorter-order.desc&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tableSorter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;CONCLUSION&lt;/h2&gt;

&lt;p&gt;Protractor is a awesome tool for create and integrate end-to-end test in your applications, but remember that end-to-end is used with unit tests (more unit tests, less end-to-end tests).&lt;/p&gt;

&lt;p&gt;Thanks and we see very soon!&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Feb 2015 00:00:00 +0000</pubDate>
        <link>http://willmendesneto.github.io/2015/02/15/angularjs-about-e2e-tests-and-protractor-pt-2</link>
        <guid isPermaLink="true">http://willmendesneto.github.io/2015/02/15/angularjs-about-e2e-tests-and-protractor-pt-2</guid>
        
        <category>workflow</category>
        
        <category>frontend</category>
        
        <category>tests</category>
        
        
        <category>angularjs</category>
        
        <category>frontend</category>
        
        <category>protractor</category>
        
        <category>end-to-end</category>
        
        <category>tests</category>
        
      </item>
    
      <item>
        <title>AngularJS: About E2E tests and Protractor - pt 1</title>
        <description>&lt;h2&gt;INTRODUCTION&lt;/h2&gt;

&lt;p&gt;You never speak about protractor or End-to-tests? This time the aspect approached will be the tests, most specifically End-to-end test, with an overview in some aspects for Protractor, the framework created for AngularJS, but that can be used with many other projects without angularjs dependency. In this post I will explain some aspects for end-to-end tests, why to use them, how the protractor is included in this approach and show a example of your use in tests.&lt;/p&gt;

&lt;h2&gt;Why End to End (E2E) tests&lt;/h2&gt;

&lt;p&gt;End to End tests are pretty good tests for validate some aspects of your application , such as functionalities and interactions. For example, you will use End to End test in this cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Validate if your component works on in your application, generating a &amp;quot;happy way&amp;quot;;&lt;/li&gt;
&lt;li&gt;Validate interaction in your browser between backend and frontend, based in a complete operation, like a login, search and other validations;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Unit Tests and End to End tests ever works together.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Well, but...why Protractor&lt;/h2&gt;

&lt;p&gt;Protractor is a tool created for attend developers of an easier way, with a reasonable setup, low context-switching and sensible syntax using all power of WebDrivers can do for us.&lt;/p&gt;

&lt;p&gt;Your configuration is very easy (protractor born with this specification), that help in your use in applications.&lt;/p&gt;

&lt;h2&gt;SETUP&lt;/h2&gt;

&lt;p&gt;The setup of protractor is very easy. Firts it&amp;#39;s available via NPM (Node Package Manager) and your installation is done with the command&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;awesome-folder
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install  protractor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And update your webdrive using this command in folder that you create and add protractor package.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./node_modules/protractor/bin/webdriver-manager update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After this you can use the protractor template for begin your tests. If you can, use this template for begin tests with protractor and configure your folder for end-to-end tests&lt;/p&gt;

&lt;p&gt;&lt;noscript&gt;&lt;pre&gt;// An example configuration file.
exports.config = {
  // Do not start a Selenium Standalone sever - only run this using chrome.
  chromeOnly: true,
  chromeDriver: &amp;#39;./node_modules/protractor/selenium/chromedriver&amp;#39;,&lt;/p&gt;

&lt;p&gt;seleniumAddress: &amp;#39;http://0.0.0.0:4444/wd/hub&amp;#39;,
  baseUrl: &amp;#39;http://0.0.0.0:9000&amp;#39;,&lt;/p&gt;

&lt;p&gt;// Capabilities to be passed to the webdriver instance.
  capabilities: {
    &amp;#39;browserName&amp;#39;: &amp;#39;chrome&amp;#39;
  },&lt;/p&gt;

&lt;p&gt;// Spec patterns are relative to the current working directly when
  // protractor is called.
  specs: [&amp;#39;test/e2e/*&lt;em&gt;/&lt;/em&gt;_spec.js&amp;#39;],&lt;/p&gt;

&lt;p&gt;// Options to be passed to Jasmine-node.
  jasmineNodeOpts: {
    showColors: true,
    defaultTimeoutInterval: 30000
  }
};&lt;/pre&gt;&lt;/noscript&gt;&lt;script src=&quot;https://gist.github.com/willmendesneto/d6d1163b39356e5e103a.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;h2&gt;Boilerplate&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Basic step for use end-to-end tests&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;An example of end-to-end tests file is access the todo list that exists in angularjs website.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;angularjs homepage todo list&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// before function&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;afterEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//after function&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;should add a todo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;http://www.angularjs.org&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;todoText&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sendKeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;write a protractor test&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;[value=&amp;quot;add&amp;quot;]&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;todoList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;repeater&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;todo in todos&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todoList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;todoList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;write a protractor test&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this example we can see some elements that we will use many times in Protractor tests, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;browser: API for browser element. In this example we use &lt;code&gt;browser&lt;/code&gt; for access some url;&lt;/li&gt;
&lt;li&gt;element: API for access some page element. Is very usefull for get elements based in certain parameters and manipulate them;&lt;/li&gt;
&lt;li&gt;by: API for access element based in parameters (css, angular models, angular repeaters, etc);&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you would like to know more about the API&amp;#39;s protractor, &lt;a href=&quot;http://angular.github.io/protractor/#/api&quot;&gt;please take a look in protractor documentation&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;CONCLUSION&lt;/h2&gt;

&lt;p&gt;Now you are most familiarized with the concept of End-to-end tests and the powerfull tool that is protractor. In next post we will take a look in others aspects of protractor, such as performance and best practices.&lt;/p&gt;

&lt;p&gt;Do you like of this post? Comments this post, feedbacks are always welcome ;)&lt;/p&gt;

&lt;p&gt;Links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Protractor API docs: &lt;a href=&quot;http://angular.github.io/protractor/#/api&quot;&gt;http://angular.github.io/protractor/#/api&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 14 Feb 2015 00:00:00 +0000</pubDate>
        <link>http://willmendesneto.github.io/2015/02/14/angularjs-about-e2e-tests-and-protractor-pt-1</link>
        <guid isPermaLink="true">http://willmendesneto.github.io/2015/02/14/angularjs-about-e2e-tests-and-protractor-pt-1</guid>
        
        <category>workflow</category>
        
        <category>frontend</category>
        
        <category>tests</category>
        
        
        <category>angularjs</category>
        
        <category>frontend</category>
        
        <category>protractor</category>
        
        <category>end-to-end</category>
        
        <category>tests</category>
        
      </item>
    
      <item>
        <title>CLI: Funções e Alias</title>
        <description>&lt;h2&gt;INTRODUÇÃO&lt;/h2&gt;

&lt;p&gt;Faz algum tempo que optei por utilizar editores de texto ao invés de utilizar IDE&amp;#39;s mais robustas. A partir daí utilizo bastante os editores VIM e Sublime Text e adaptei algumas coisas ao meu workflow quando estou no ambiente CLI. Esta postagem mostra algumas alterações que fiz no meu workflow para melhorar o ambiente CLI e que podem ajudar outros devs.&lt;/p&gt;

&lt;h2&gt;LINHA DE COMANDO&lt;/h2&gt;

&lt;p&gt;É sempre uma boa prática modularizar os arquivos. Para isto criaremos 2 arquivos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.functions&lt;/code&gt;: arquivo onde ficarão as funções;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.aliases&lt;/code&gt;: arquivo onde ficarão os atalhos/aliases;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Utilizo como base algumas configurações do Paul Irish, uma das referências quando se fala em frontend atualmente, e os arquivos ficaram com o seguinte conteúdo:&lt;/p&gt;

&lt;p&gt;.functions&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Simple calculator&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; calc&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$(printf &amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$*&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; | bc --mathlib | tr -d &amp;#39;\\\n&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#                       └─ default (when `--mathlib` is used) is 20&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$result&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; *.* &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# improve the output for decimal numbers&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$result&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;
        sed -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/^\./0./&amp;#39;&lt;/span&gt;        &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# add &amp;quot;0&amp;quot; for cases like &amp;quot;.5&amp;quot;` \&lt;/span&gt;
            -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/^-\./-0./&amp;#39;&lt;/span&gt;      &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# add &amp;quot;0&amp;quot; for cases like &amp;quot;-.5&amp;quot;`\&lt;/span&gt;
            -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;s/0*$//;s/\.$//&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# remove trailing zeros&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$result&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Create a new directory and enter it&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; mkd&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    mkdir -p &lt;span class=&quot;s2&quot;&gt;&amp;quot;$@&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$_&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; targz&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tmpFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;${@%/}.tar&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    tar -cvf &lt;span class=&quot;s2&quot;&gt;&amp;quot;${tmpFile}&amp;quot;&lt;/span&gt; --exclude&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;.DS_Store&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;${@}&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; 1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;
        stat -f&lt;span class=&quot;s2&quot;&gt;&amp;quot;%z&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;${tmpFile}&amp;quot;&lt;/span&gt; 2&amp;gt; /dev/null&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# OS X `stat`&lt;/span&gt;
        stat -c&lt;span class=&quot;s2&quot;&gt;&amp;quot;%s&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;${tmpFile}&amp;quot;&lt;/span&gt; 2&amp;gt; /dev/null &lt;span class=&quot;c&quot;&gt;# GNU `stat`&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt; size &amp;lt; &lt;span class=&quot;m&quot;&gt;52428800&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash &lt;/span&gt;zopfli 2&amp;gt; /dev/null&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# the .tar file is smaller than 50 MB and Zopfli is available; use it&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;zopfli&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hash &lt;/span&gt;pigz 2&amp;gt; /dev/null&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;pigz&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;gzip&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Compressing .tar using \`${cmd}\`…&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;${cmd}&amp;quot;&lt;/span&gt; -v &lt;span class=&quot;s2&quot;&gt;&amp;quot;${tmpFile}&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; 1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -f &lt;span class=&quot;s2&quot;&gt;&amp;quot;${tmpFile}&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm &lt;span class=&quot;s2&quot;&gt;&amp;quot;${tmpFile}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;${tmpFile}.gz created successfully.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Create a new directory and enter it&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; md&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    mkdir -p &lt;span class=&quot;s2&quot;&gt;&amp;quot;$@&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$@&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# find shorthand&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; f&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    find . -name &lt;span class=&quot;s2&quot;&gt;&amp;quot;$1&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Start an HTTP server from a directory, optionally specifying the port&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; server&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;${1:-8000}&amp;quot;&lt;/span&gt;
    open &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://localhost:${port}/&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# Set the default Content-Type to `text/plain` instead of `application/octet-stream`&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)&lt;/span&gt;
    python -c &lt;span class=&quot;s1&quot;&gt;$&amp;#39;import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[&amp;quot;&amp;quot;] = &amp;quot;text/plain&amp;quot;;\nfor key, value in map.items():\n\tmap[key] = value + &amp;quot;;charset=UTF-8&amp;quot;;\nSimpleHTTPServer.test();&amp;#39;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$port&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# git log with per-commit cmd-clickable GitHub URLs (iTerm)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; gf&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;remote&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$(git remote -v | awk &amp;#39;/^origin.*\(push\)$/ {print $2}&amp;#39;)&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$remote&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;user_repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$(echo &amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$remote&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; | perl -pe &amp;#39;s/.*://;s/\.git$//&amp;#39;)&amp;quot;&lt;/span&gt;
  git log &lt;span class=&quot;nv&quot;&gt;$*&lt;/span&gt; --name-status --color &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; awk &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(cat &amp;lt;&amp;lt;AWK&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;    /^.*commit [0-9a-f]{40}/ {sha=substr(\$2,1,7)}&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;    /^[MA]\t/ {printf &amp;quot;&lt;/span&gt;%s&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;https://github.com/&lt;span class=&quot;nv&quot;&gt;$user_repo&lt;/span&gt;/blob/%s/%s&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;, \$1, sha, \$2; next}&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;    /.*/ {print \$0}&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;AWK&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;  )&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; less -F
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# Copy w/ progress&lt;/span&gt;
cp_p &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  rsync -WavP --human-readable --progress &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; httpcompression&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$(curl -LIs -H &amp;#39;User-Agent: Mozilla/5 Gecko&amp;#39; -H &amp;#39;Accept-Encoding: gzip,deflate,compress,sdch&amp;#39; &amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; | grep &amp;#39;^Content-Encoding:&amp;#39;)&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$1 is encoded using ${encoding#* }&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$1 is not using any encoding&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Syntax-highlight JSON strings or files&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; json&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -p /dev/stdin &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# piping, e.g. `echo &amp;#39;{&amp;quot;foo&amp;quot;:42}&amp;#39; | json`&lt;/span&gt;
        python -mjson.tool &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; pygmentize -l javascript
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# e.g. `json &amp;#39;{&amp;quot;foo&amp;quot;:42}&amp;#39;`&lt;/span&gt;
        python -mjson.tool &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$*&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; pygmentize -l javascript
    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# take this repo and copy it to somewhere else minus the .git stuff.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; gitexport&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    mkdir -p &lt;span class=&quot;s2&quot;&gt;&amp;quot;$1&amp;quot;&lt;/span&gt;
    git archive master &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; tar -x -C &lt;span class=&quot;s2&quot;&gt;&amp;quot;$1&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;



&lt;span class=&quot;c&quot;&gt;# get gzipped size&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; gz&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;orig size    (bytes): &amp;quot;&lt;/span&gt;
    cat &lt;span class=&quot;s2&quot;&gt;&amp;quot;$1&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; wc -c
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;gzipped size (bytes): &amp;quot;&lt;/span&gt;
    gzip -c &lt;span class=&quot;s2&quot;&gt;&amp;quot;$1&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; wc -c
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# Extract archives - use: extract &amp;lt;file&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Based on http://dotfiles.org/~pseup/.bashrc&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; extract&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -f &lt;span class=&quot;s2&quot;&gt;&amp;quot;$1&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;basename &lt;span class=&quot;s2&quot;&gt;&amp;quot;$1&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;foldername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;${filename%%.*}&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fullpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;perl -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;use Cwd &amp;quot;abs_path&amp;quot;;print abs_path(shift)&amp;#39;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$1&amp;quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;didfolderexist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -d &lt;span class=&quot;s2&quot;&gt;&amp;quot;$foldername&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;didfolderexist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;            read&lt;/span&gt; -p &lt;span class=&quot;s2&quot;&gt;&amp;quot;$foldername already exists, do you want to overwrite it? (y/n) &amp;quot;&lt;/span&gt; -n 1
            &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$REPLY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~ ^&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Nn&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
        mkdir -p &lt;span class=&quot;s2&quot;&gt;&amp;quot;$foldername&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$foldername&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; in
            *.tar.bz2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; tar xjf &lt;span class=&quot;s2&quot;&gt;&amp;quot;$fullpath&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
            *.tar.gz&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; tar xzf &lt;span class=&quot;s2&quot;&gt;&amp;quot;$fullpath&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
            *.tar.xz&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; tar Jxvf &lt;span class=&quot;s2&quot;&gt;&amp;quot;$fullpath&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
            *.tar.Z&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; tar xzf &lt;span class=&quot;s2&quot;&gt;&amp;quot;$fullpath&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
            *.tar&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; tar xf &lt;span class=&quot;s2&quot;&gt;&amp;quot;$fullpath&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
            *.taz&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; tar xzf &lt;span class=&quot;s2&quot;&gt;&amp;quot;$fullpath&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
            *.tb2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; tar xjf &lt;span class=&quot;s2&quot;&gt;&amp;quot;$fullpath&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
            *.tbz&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; tar xjf &lt;span class=&quot;s2&quot;&gt;&amp;quot;$fullpath&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
            *.tbz2&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; tar xjf &lt;span class=&quot;s2&quot;&gt;&amp;quot;$fullpath&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
            *.tgz&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; tar xzf &lt;span class=&quot;s2&quot;&gt;&amp;quot;$fullpath&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
            *.txz&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; tar Jxvf &lt;span class=&quot;s2&quot;&gt;&amp;quot;$fullpath&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
            *.zip&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; unzip &lt;span class=&quot;s2&quot;&gt;&amp;quot;$fullpath&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
            *&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;#39;$1&amp;#39; cannot be extracted via extract()&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; .. &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ! &lt;span class=&quot;nv&quot;&gt;$didfolderexist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm -r &lt;span class=&quot;s2&quot;&gt;&amp;quot;$foldername&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;#39;$1&amp;#39; is not a valid file&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# animated gifs from any video&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# from alex sexton   gist.github.com/SlexAxton/4989674&lt;/span&gt;
gifify&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; -n &lt;span class=&quot;s2&quot;&gt;&amp;quot;$1&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;--good&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
      ffmpeg -i &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; -r &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; -vcodec png out-static-%05d.png
      &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;convert -verbose +dither -layers Optimize -resize 900x900&lt;span class=&quot;se&quot;&gt;\&amp;gt;&lt;/span&gt; out-static*.png  GIF:- &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; gifsicle --colors &lt;span class=&quot;m&quot;&gt;128&lt;/span&gt; --delay&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;5&lt;/span&gt; --loop --optimize&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; --multifile - &amp;gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;.gif
      rm out-static*.png
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      ffmpeg -i &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; -s 600x400 -pix_fmt rgb24 -r &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; -f gif - &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; gifsicle --optimize&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; --delay&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; &amp;gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;.gif
    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;proper usage: gifify &amp;lt;input_movie.mov&amp;gt;. You DO need to include extension.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# turn that video into webm.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# brew reinstall ffmpeg --with-libvpx&lt;/span&gt;
webmify&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    ffmpeg -i &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; -vcodec libvpx -acodec libvorbis -isync -copyts -aq &lt;span class=&quot;m&quot;&gt;80&lt;/span&gt; -threads &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; -qmax &lt;span class=&quot;m&quot;&gt;30&lt;/span&gt; -y &lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;.webm
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Agora o arquivo .aliases&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;################################################################################&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#       Default Aliases&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;################################################################################&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Easier navigation: .., ..., ...., ....., ~ and -&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; ..&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;cd ..&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; ...&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;cd ../..&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; ....&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;cd ../../..&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; .....&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;cd ../../../..&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; ~&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;cd ~&amp;quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# `cd` is probably faster to type though&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; -- -&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;cd -&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# List only directories&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;listdir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ls -lF ${colorflag} | grep --color=never &amp;#39;^d&amp;#39;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sha1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;openssl sha1&amp;#39;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;echo -e ${PATH//:/\\n}&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;date +&amp;quot;%T&amp;quot;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nowtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;now
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nowdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;date +&amp;quot;%d-%m-%Y&amp;quot;&amp;#39;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Stop after sending count ECHO_REQUEST packets #&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ping -c 5&amp;#39;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Do not wait interval 1 second, go fast #&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fastping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ping -c 100 -s.2&amp;#39;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;netstat -tulanp&amp;#39;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# get web server headers #&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;curl -I&amp;#39;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# find out if remote server supports gzip / mod_deflate or not #&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;headerc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;curl -I --compress&amp;#39;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;## shortcut  for iptables and pass it via sudo#&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ipt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sudo /sbin/iptables&amp;#39;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# display all rules #&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;iptlist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sudo /sbin/iptables -L -n -v --line-numbers&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;iptlistin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sudo /sbin/iptables -L INPUT -n -v --line-numbers&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;iptlistout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sudo /sbin/iptables -L OUTPUT -n -v --line-numbers&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;iptlistfw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sudo /sbin/iptables -L FORWARD -n -v --line-numbers&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;firewall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;iptlist

&lt;span class=&quot;c&quot;&gt;## Colorize the grep command output for ease of use (good for log files)##&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;grep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;grep --color=auto&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;egrep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;egrep --color=auto&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fgrep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;fgrep --color=auto&amp;#39;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# YUM Package manager alias&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;yumupdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sudo yum update &amp;amp;&amp;amp; sudo yum upgrade&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;yumsearch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sudo yum search&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;yumremove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sudo yum remove&amp;#39;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Shortcuts&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;cd ~/Downloads&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;cd ~/Desktop&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;cd ~/projects&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;git&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;history&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;jobs&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# IP addresses&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;dig +short myip.opendns.com @resolver1.opendns.com&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;localip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ifconfig getifaddr en1&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ips&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ifconfig -a | perl -nle&amp;#39;/(\d+\.\d+\.\d+\.\d+)/ &amp;amp;&amp;amp; print $1&amp;#39;&amp;quot;&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# Copy my public key to the pasteboard&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pubkey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;more ~/.ssh/id_rsa.pub | pbcopy | printf &amp;#39;=&amp;gt; Public key copied to pasteboard.\n&amp;#39;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Flush Directory Service cache&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;dscacheutil -flushcache&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# View HTTP traffic&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sniff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;sudo ngrep -d &amp;#39;en1&amp;#39; -t &amp;#39;^(GET|POST) &amp;#39; &amp;#39;tcp and port 80&amp;#39;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;httpdump&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E \&amp;quot;Host\: .*|GET \/.*\&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# File size&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;stat -f \&amp;quot;%z bytes\&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Recursively delete `.DS_Store` files&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;find . -type f -name &amp;#39;*.DS_Store&amp;#39; -ls -delete&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;xlog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;sudo grep --binary-files=without-match --color -nsie &amp;#39;(EE)&amp;#39; -e &amp;#39;(WW)&amp;#39; /var/log/Xorg.0.log&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;which&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;whence&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;export DISPLAY=:0.0&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cpan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;perl -MCPAN -e shell&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cvs -z3 update -Pd&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;mv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;nocorrect /bin/mv&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;nocorrect /bin/rm -i&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;shred&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;nocorrect ionice -c3 /usr/bin/shred -fuz&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;nocorrect ionice -c3 /usr/bin/wipe -l2 -v -x -r&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;man&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;nocorrect man&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;mkdir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;nocorrect /bin/mkdir -p&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;noglob find&amp;#39;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Jekyll alias&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;jsw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll serve -w&amp;#39;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# alias wget=&amp;quot;wget -c&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lsd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ls -Fld *(-/DN)&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/home/gregf/code/bin/forecast/forecast.rb&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ncmpc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ncmpc -c&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fixdbus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;sudo -s dbus-uuidgen --ensure&amp;quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;vim&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;open&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;devtodo -A&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;sudo subl&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;subl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;sudo subl&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Reload the shell (i.e. invoke as a login shell)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;reloadshell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;exec $SHELL -l&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Concatenate and print content of files (add line numbers)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;catn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;cat -n&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Kill all the tabs in Chrome to free up memory&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# [C] explained: http://www.commandlinefu.com/commands/view/402/exclude-grep-from-your-grepped-output-of-ps-alias-included-in-description&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;chromekill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ps ux | grep &amp;#39;[C]hrome Helper --type=renderer&amp;#39; | grep -v extension-process | tr -s &amp;#39; &amp;#39; | cut -d &amp;#39; &amp;#39; -f2 | xargs kill&amp;quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tlog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;tail -f log/development.log&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;touch tmp/restart.txt&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;giti&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;vim .gitignore&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;gthumb&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;burniso&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;wodim -v dev=/dev/cdrw&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;burndvdiso&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;growisofs -speed=8 -dvd-compat -Z /dev/dvdrw=$1&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;biosinfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sudo dmidecode&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;f-spot&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;dbus-launch f-spot&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;gnp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;git-notpushed&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;killall&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;poweroff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sudo poweroff&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;reboot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sudo reboot&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lsnoext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ls | grep -v &amp;#39;\.&amp;#39;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ipager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;k ipager; sleep 1; ipager &amp;amp;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;gis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;git status | grep --color=always &amp;#39;^[^a-z]\+\(new file:\|modified:\)&amp;#39; | cut -d&amp;#39;#&amp;#39; -f2-&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;netstat --inet -pln&amp;#39;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;subl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;sudo subl&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;la&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ls -la&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;srm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;sudo rm -rf&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;smkdir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;sudo mkdir&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;OH-MY-ZSH&lt;/h2&gt;

&lt;p&gt;Algumas informações para inserirmos algumas funções e aliases no ambiente CLI. Como utilizo e contribuo para o projeto oh-my-zsh, ele por padrão utiliza um arquivo &lt;code&gt;.zshrc&lt;/code&gt; para carregar alguns plugins, alias e funções. Existe uma linha para o carregamento automático dos plugins do oh-my-zsh e alguns que carrego por padrão são:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;git rails ruby frontend-search nvm rvm vagrant&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;E adicionamos estas linhas no arquivo &lt;code&gt;.zshrc&lt;/code&gt; para carregar as nossas configurações.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;##############################################################################&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#       Clear screen on logout&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;##############################################################################&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;trap &lt;/span&gt;clear 0

&lt;span class=&quot;c&quot;&gt;################################################################################&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Resource Limits&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;################################################################################&lt;/span&gt;
limit stack 8192
&lt;span class=&quot;c&quot;&gt;#limit core unlimited&lt;/span&gt;
limit core 0
limit -s

&lt;span class=&quot;c&quot;&gt;# Source global definitions&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -f ~/.functions &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    . ~/.functions
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Source global definitions&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -f ~/.aliases &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    . ~/.aliases
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# User configuration&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$PATH:$HOME/bin:/usr/local/bin&amp;quot;&lt;/span&gt;

devilspie -a &lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt; clear&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;CONCLUSÃO&lt;/h2&gt;

&lt;p&gt;Estas são algumas configurações que utilizo ao trabalhar em ambientes CLI, o que acontece diariamente já que minhas ferramentas de trabalho &amp;quot;default&amp;quot; são um editor de texto e um terminal.&lt;/p&gt;

&lt;p&gt;Tem outro workflow para ambientes CLI? Comente e compartilhe essa experiência, pois...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Conhecimento bom é conhecimento compartilhado&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Abraço e até mais!&lt;/p&gt;

&lt;p&gt;Links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gist: arquivo .functions &lt;a href=&quot;https://gist.github.com/willmendesneto/b6bc8ab4f868a9ec459c&quot;&gt;https://gist.github.com/willmendesneto/b6bc8ab4f868a9ec459c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Gist: arquivo .aliases &lt;a href=&quot;https://gist.github.com/willmendesneto/3c1c150666b02232e494&quot;&gt;https://gist.github.com/willmendesneto/3c1c150666b02232e494&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 13 Feb 2015 00:00:00 +0000</pubDate>
        <link>http://willmendesneto.github.io/2015/02/13/cli-funcoes-e-alias</link>
        <guid isPermaLink="true">http://willmendesneto.github.io/2015/02/13/cli-funcoes-e-alias</guid>
        
        <category>oh-my-zsh</category>
        
        <category>workflow</category>
        
        <category>frontend</category>
        
        <category>backend</category>
        
        <category>cli</category>
        
        <category>functions</category>
        
        <category>aliases</category>
        
        
        <category>oh-my-zsh</category>
        
        <category>workflow</category>
        
      </item>
    
  </channel>
</rss>
